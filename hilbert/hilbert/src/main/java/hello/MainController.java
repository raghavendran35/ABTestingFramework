package hello;

//spring application connected to mysql database
//not an in-memory database
//has TomCat servelet container
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

//CRUD:
//Create-implemented
//Read---implemented
//Update---TODO...should be relatively easy
//Repeat---...

import hello.User;
import hello.UserRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@GetMapping(path="/add") // POST
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String company, @RequestParam String username,
			@RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setCompany(company);
		n.setUsername(username);
		n.setPassword(hashIt(password));
		userRepository.save(n);
		return "Saved\n";
	}


	//SHA256 encryption
	private String hashIt(String key){
		MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        digest.update(key.getBytes());
        String encryptedString = new String(digest.digest());
        return encryptedString;
	}

	//GET
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	//GET
	@GetMapping(path = "/id")
	public @ResponseBody User getUser(@RequestParam Integer id){
		for (User x:userRepository.findAll()){
			if (x.id == id){
				return x;
			}
		}
		return null;
	}


	//GET
	@GetMapping(path="/total")
	public @ResponseBody String getUserNums() {
		// This returns a JSON or XML with the users
		return "\n" + userRepository.count() + "\n";
	}

	//TODO: put an UPDATE by ID

//	@GetMapping(path="/change")
//	public @ResponseBody User updateVal(@RequestParam Integer id, @RequestParam String trait, @RequestParam String newValue){
//		User currUser;
//		for (User x:userRepository.findAll()){
//			if (x.id == id){
//				currUser = new User();
//				currUser.setID(x.id*Math.pow(10**8));
//				currUser.setName(x.name);
//				currUser.setCompany(x.company);
//				currUser.setPassword(x.password);
//				currUser.setUsername(x.username);
//				userRepository.deleteById(x);
//				break;
//			}
//		}

//		currUser.setID(x.id/Math.pow(10**8));

//		switch(trait){

//			case "name":currUser.setName(newValue);
//						break;

//			case "company":currUser.setCompany(newValue);
//						break;

//			case "username":currUser.setUsername(newValue);
//						break;

//			case "password":currUser.setPassword(newValue);
//						break;

//			default "none": break;
//				break;
//		userRepository.save(currUser);
//		}

//	}

}
